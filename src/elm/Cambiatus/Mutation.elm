-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Cambiatus.Mutation exposing (..)

import Cambiatus.Enum.CurrencyType
import Cambiatus.InputObject
import Cambiatus.Interface
import Cambiatus.Object
import Cambiatus.Scalar
import Cambiatus.ScalarCodecs
import Cambiatus.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias AddCommunityPhotosRequiredArguments =
    { symbol : String
    , urls : List String
    }


{-| [Auth required - Admin only] Adds photos of a community
-}
addCommunityPhotos :
    AddCommunityPhotosRequiredArguments
    -> SelectionSet decodesTo Cambiatus.Object.Community
    -> SelectionSet (Maybe decodesTo) RootMutation
addCommunityPhotos requiredArgs object_ =
    Object.selectionForCompositeField "addCommunityPhotos" [ Argument.required "symbol" requiredArgs.symbol Encode.string, Argument.required "urls" requiredArgs.urls (Encode.string |> Encode.list) ] object_ (identity >> Decode.nullable)


type alias CompleteObjectiveRequiredArguments =
    { input : Cambiatus.InputObject.CompleteObjectiveInput }


{-| [Auth required - Admin only] Complete an objective
-}
completeObjective :
    CompleteObjectiveRequiredArguments
    -> SelectionSet decodesTo Cambiatus.Object.Objective
    -> SelectionSet (Maybe decodesTo) RootMutation
completeObjective requiredArgs object_ =
    Object.selectionForCompositeField "completeObjective" [ Argument.required "input" requiredArgs.input Cambiatus.InputObject.encodeCompleteObjectiveInput ] object_ (identity >> Decode.nullable)


type alias ContributionRequiredArguments =
    { amount : Float
    , communityId : String
    , currency : Cambiatus.Enum.CurrencyType.CurrencyType
    }


{-| [Auth required] Create a new contribution
-}
contribution :
    ContributionRequiredArguments
    -> SelectionSet decodesTo Cambiatus.Object.Contribution
    -> SelectionSet (Maybe decodesTo) RootMutation
contribution requiredArgs object_ =
    Object.selectionForCompositeField "contribution" [ Argument.required "amount" requiredArgs.amount Encode.float, Argument.required "communityId" requiredArgs.communityId Encode.string, Argument.required "currency" requiredArgs.currency (Encode.enum Cambiatus.Enum.CurrencyType.toString) ] object_ (identity >> Decode.nullable)


{-| [Auth required] A mutation to delete user's address data
-}
deleteAddress :
    SelectionSet decodesTo Cambiatus.Object.DeleteKycAddress
    -> SelectionSet (Maybe decodesTo) RootMutation
deleteAddress object_ =
    Object.selectionForCompositeField "deleteAddress" [] object_ (identity >> Decode.nullable)


{-| [Auth required] A mutation to delete user's kyc data
-}
deleteKyc :
    SelectionSet decodesTo Cambiatus.Object.DeleteKycAddress
    -> SelectionSet (Maybe decodesTo) RootMutation
deleteKyc object_ =
    Object.selectionForCompositeField "deleteKyc" [] object_ (identity >> Decode.nullable)


type alias HasNewsRequiredArguments =
    { communityId : String
    , hasNews : Bool
    }


{-| [Auth required - Admin only] Set has\_news flag of community
-}
hasNews :
    HasNewsRequiredArguments
    -> SelectionSet decodesTo Cambiatus.Object.Community
    -> SelectionSet (Maybe decodesTo) RootMutation
hasNews requiredArgs object_ =
    Object.selectionForCompositeField "hasNews" [ Argument.required "communityId" requiredArgs.communityId Encode.string, Argument.required "hasNews" requiredArgs.hasNews Encode.bool ] object_ (identity >> Decode.nullable)


type alias HighlightedNewsOptionalArguments =
    { newsId : OptionalArgument Int }


type alias HighlightedNewsRequiredArguments =
    { communityId : String }


{-| [Auth required - Admin only] Set highlighted news of community. If news\_id is not present, sets highlighted as nil
-}
highlightedNews :
    (HighlightedNewsOptionalArguments -> HighlightedNewsOptionalArguments)
    -> HighlightedNewsRequiredArguments
    -> SelectionSet decodesTo Cambiatus.Object.Community
    -> SelectionSet (Maybe decodesTo) RootMutation
highlightedNews fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { newsId = Absent }

        optionalArgs =
            [ Argument.optional "newsId" filledInOptionals.newsId Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "highlightedNews" (optionalArgs ++ [ Argument.required "communityId" requiredArgs.communityId Encode.string ]) object_ (identity >> Decode.nullable)


type alias NewsOptionalArguments =
    { scheduling : OptionalArgument Cambiatus.ScalarCodecs.DateTime }


type alias NewsRequiredArguments =
    { communityId : String
    , description : String
    , title : String
    }


{-| [Auth required - Admin only] News mutation, that allows for creating news on a community
-}
news :
    (NewsOptionalArguments -> NewsOptionalArguments)
    -> NewsRequiredArguments
    -> SelectionSet decodesTo Cambiatus.Object.News
    -> SelectionSet (Maybe decodesTo) RootMutation
news fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { scheduling = Absent }

        optionalArgs =
            [ Argument.optional "scheduling" filledInOptionals.scheduling (Cambiatus.ScalarCodecs.codecs |> Cambiatus.Scalar.unwrapEncoder .codecDateTime) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "news" (optionalArgs ++ [ Argument.required "communityId" requiredArgs.communityId Encode.string, Argument.required "description" requiredArgs.description Encode.string, Argument.required "title" requiredArgs.title Encode.string ]) object_ (identity >> Decode.nullable)


type alias ReactToNewsRequiredArguments =
    { newsId : Int
    , reactions : List String
    }


{-| [Auth required] Add or update reactions from user in a news through news\_receipt
-}
reactToNews :
    ReactToNewsRequiredArguments
    -> SelectionSet decodesTo Cambiatus.Object.NewsReceipt
    -> SelectionSet (Maybe decodesTo) RootMutation
reactToNews requiredArgs object_ =
    Object.selectionForCompositeField "reactToNews" [ Argument.required "newsId" requiredArgs.newsId Encode.int, Argument.required "reactions" requiredArgs.reactions (Encode.string |> Encode.list) ] object_ (identity >> Decode.nullable)


type alias ReadRequiredArguments =
    { newsId : Int }


{-| [Auth required] Mark news as read, creating a new news\_receipt without reactions
-}
read :
    ReadRequiredArguments
    -> SelectionSet decodesTo Cambiatus.Object.NewsReceipt
    -> SelectionSet (Maybe decodesTo) RootMutation
read requiredArgs object_ =
    Object.selectionForCompositeField "read" [ Argument.required "newsId" requiredArgs.newsId Encode.int ] object_ (identity >> Decode.nullable)


type alias ReadNotificationRequiredArguments =
    { input : Cambiatus.InputObject.ReadNotificationInput }


{-| [Auth required] Mark a notification history as read
-}
readNotification :
    ReadNotificationRequiredArguments
    -> SelectionSet decodesTo Cambiatus.Object.NotificationHistory
    -> SelectionSet decodesTo RootMutation
readNotification requiredArgs object_ =
    Object.selectionForCompositeField "readNotification" [ Argument.required "input" requiredArgs.input Cambiatus.InputObject.encodeReadNotificationInput ] object_ identity


type alias RegisterPushRequiredArguments =
    { input : Cambiatus.InputObject.PushSubscriptionInput }


{-| [Auth required] Register an push subscription on Cambiatus
-}
registerPush :
    RegisterPushRequiredArguments
    -> SelectionSet decodesTo Cambiatus.Object.PushSubscription
    -> SelectionSet decodesTo RootMutation
registerPush requiredArgs object_ =
    Object.selectionForCompositeField "registerPush" [ Argument.required "input" requiredArgs.input Cambiatus.InputObject.encodePushSubscriptionInput ] object_ identity


type alias SignInOptionalArguments =
    { invitationId : OptionalArgument String }


type alias SignInRequiredArguments =
    { account : String
    , password : String
    }


{-|

  - invitationId - Optional, used to auto invite an user to a community

-}
signIn :
    (SignInOptionalArguments -> SignInOptionalArguments)
    -> SignInRequiredArguments
    -> SelectionSet decodesTo Cambiatus.Object.Session
    -> SelectionSet (Maybe decodesTo) RootMutation
signIn fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { invitationId = Absent }

        optionalArgs =
            [ Argument.optional "invitationId" filledInOptionals.invitationId Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "signIn" (optionalArgs ++ [ Argument.required "account" requiredArgs.account Encode.string, Argument.required "password" requiredArgs.password Encode.string ]) object_ (identity >> Decode.nullable)


type alias SignUpOptionalArguments =
    { address : OptionalArgument Cambiatus.InputObject.AddressUpdateInput
    , invitationId : OptionalArgument String
    , kyc : OptionalArgument Cambiatus.InputObject.KycDataUpdateInput
    }


type alias SignUpRequiredArguments =
    { account : String
    , email : String
    , name : String
    , password : String
    , publicKey : String
    , userType : String
    }


{-| Creates a new user account

  - account - EOS Account, must have 12 chars long and use only [a-z] and [0-5]
  - address - Optional, Address data
  - email - User's email
  - invitationId - Optional, used to auto invite an user to a community
  - kyc - Optional, KYC data
  - name - User's Full name
  - publicKey - EOS Account public key, used for creating a new account
  - userType - User type informs if its a 'natural' or 'juridical' user for regular users and companies

-}
signUp :
    (SignUpOptionalArguments -> SignUpOptionalArguments)
    -> SignUpRequiredArguments
    -> SelectionSet decodesTo Cambiatus.Object.Session
    -> SelectionSet (Maybe decodesTo) RootMutation
signUp fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { address = Absent, invitationId = Absent, kyc = Absent }

        optionalArgs =
            [ Argument.optional "address" filledInOptionals.address Cambiatus.InputObject.encodeAddressUpdateInput, Argument.optional "invitationId" filledInOptionals.invitationId Encode.string, Argument.optional "kyc" filledInOptionals.kyc Cambiatus.InputObject.encodeKycDataUpdateInput ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "signUp" (optionalArgs ++ [ Argument.required "account" requiredArgs.account Encode.string, Argument.required "email" requiredArgs.email Encode.string, Argument.required "name" requiredArgs.name Encode.string, Argument.required "password" requiredArgs.password Encode.string, Argument.required "publicKey" requiredArgs.publicKey Encode.string, Argument.required "userType" requiredArgs.userType Encode.string ]) object_ (identity >> Decode.nullable)


type alias UpdateNewsOptionalArguments =
    { description : OptionalArgument String
    , scheduling : OptionalArgument Cambiatus.ScalarCodecs.DateTime
    , title : OptionalArgument String
    }


type alias UpdateNewsRequiredArguments =
    { id : Int }


{-| [Auth required - Admin only] Mutation to update news
-}
updateNews :
    (UpdateNewsOptionalArguments -> UpdateNewsOptionalArguments)
    -> UpdateNewsRequiredArguments
    -> SelectionSet decodesTo Cambiatus.Object.News
    -> SelectionSet (Maybe decodesTo) RootMutation
updateNews fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { description = Absent, scheduling = Absent, title = Absent }

        optionalArgs =
            [ Argument.optional "description" filledInOptionals.description Encode.string, Argument.optional "scheduling" filledInOptionals.scheduling (Cambiatus.ScalarCodecs.codecs |> Cambiatus.Scalar.unwrapEncoder .codecDateTime), Argument.optional "title" filledInOptionals.title Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "updateNews" (optionalArgs ++ [ Argument.required "id" requiredArgs.id Encode.int ]) object_ (identity >> Decode.nullable)


type alias UpdateUserRequiredArguments =
    { input : Cambiatus.InputObject.UserUpdateInput }


{-| [Auth required] A mutation to update a user
-}
updateUser :
    UpdateUserRequiredArguments
    -> SelectionSet decodesTo Cambiatus.Object.User
    -> SelectionSet (Maybe decodesTo) RootMutation
updateUser requiredArgs object_ =
    Object.selectionForCompositeField "updateUser" [ Argument.required "input" requiredArgs.input Cambiatus.InputObject.encodeUserUpdateInput ] object_ (identity >> Decode.nullable)


type alias UpsertAddressRequiredArguments =
    { input : Cambiatus.InputObject.AddressUpdateInput }


{-| [Auth required] Updates user's address if it already exists or inserts a new one if user hasn't it yet.
-}
upsertAddress :
    UpsertAddressRequiredArguments
    -> SelectionSet decodesTo Cambiatus.Object.Address
    -> SelectionSet (Maybe decodesTo) RootMutation
upsertAddress requiredArgs object_ =
    Object.selectionForCompositeField "upsertAddress" [ Argument.required "input" requiredArgs.input Cambiatus.InputObject.encodeAddressUpdateInput ] object_ (identity >> Decode.nullable)


type alias UpsertKycRequiredArguments =
    { input : Cambiatus.InputObject.KycDataUpdateInput }


{-| [Auth required] Updates user's KYC info if it already exists or inserts a new one if user hasn't it yet.
-}
upsertKyc :
    UpsertKycRequiredArguments
    -> SelectionSet decodesTo Cambiatus.Object.KycData
    -> SelectionSet (Maybe decodesTo) RootMutation
upsertKyc requiredArgs object_ =
    Object.selectionForCompositeField "upsertKyc" [ Argument.required "input" requiredArgs.input Cambiatus.InputObject.encodeKycDataUpdateInput ] object_ (identity >> Decode.nullable)
