-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Cambiatus.Query exposing (..)

import Cambiatus.InputObject
import Cambiatus.Interface
import Cambiatus.Object
import Cambiatus.Scalar
import Cambiatus.ScalarCodecs
import Cambiatus.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias ClaimRequiredArguments =
    { input : Cambiatus.InputObject.ClaimInput }


{-| A single claim
-}
claim :
    ClaimRequiredArguments
    -> SelectionSet decodesTo Cambiatus.Object.Claim
    -> SelectionSet decodesTo RootQuery
claim requiredArgs object_ =
    Object.selectionForCompositeField "claim" [ Argument.required "input" requiredArgs.input Cambiatus.InputObject.encodeClaimInput ] object_ identity


type alias ClaimsAnalysisOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


type alias ClaimsAnalysisRequiredArguments =
    { input : Cambiatus.InputObject.ClaimsAnalysisInput }


{-| A list of claims
-}
claimsAnalysis :
    (ClaimsAnalysisOptionalArguments -> ClaimsAnalysisOptionalArguments)
    -> ClaimsAnalysisRequiredArguments
    -> SelectionSet decodesTo Cambiatus.Object.ClaimConnection
    -> SelectionSet (Maybe decodesTo) RootQuery
claimsAnalysis fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "claimsAnalysis" (optionalArgs ++ [ Argument.required "input" requiredArgs.input Cambiatus.InputObject.encodeClaimsAnalysisInput ]) object_ (identity >> Decode.nullable)


type alias ClaimsAnalysisHistoryOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


type alias ClaimsAnalysisHistoryRequiredArguments =
    { input : Cambiatus.InputObject.ClaimAnalysisHistoryInput }


claimsAnalysisHistory :
    (ClaimsAnalysisHistoryOptionalArguments -> ClaimsAnalysisHistoryOptionalArguments)
    -> ClaimsAnalysisHistoryRequiredArguments
    -> SelectionSet decodesTo Cambiatus.Object.ClaimConnection
    -> SelectionSet (Maybe decodesTo) RootQuery
claimsAnalysisHistory fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "claimsAnalysisHistory" (optionalArgs ++ [ Argument.required "input" requiredArgs.input Cambiatus.InputObject.encodeClaimAnalysisHistoryInput ]) object_ (identity >> Decode.nullable)


{-| A list of communities in Cambiatus
-}
communities :
    SelectionSet decodesTo Cambiatus.Object.Community
    -> SelectionSet (List decodesTo) RootQuery
communities object_ =
    Object.selectionForCompositeField "communities" [] object_ (identity >> Decode.list)


type alias CommunityRequiredArguments =
    { symbol : String }


{-| A single community
-}
community :
    CommunityRequiredArguments
    -> SelectionSet decodesTo Cambiatus.Object.Community
    -> SelectionSet (Maybe decodesTo) RootQuery
community requiredArgs object_ =
    Object.selectionForCompositeField "community" [ Argument.required "symbol" requiredArgs.symbol Encode.string ] object_ (identity >> Decode.nullable)


type alias CountryRequiredArguments =
    { input : Cambiatus.InputObject.CountryInput }


{-| List of supported countries
-}
country :
    CountryRequiredArguments
    -> SelectionSet decodesTo Cambiatus.Object.Country
    -> SelectionSet (Maybe decodesTo) RootQuery
country requiredArgs object_ =
    Object.selectionForCompositeField "country" [ Argument.required "input" requiredArgs.input Cambiatus.InputObject.encodeCountryInput ] object_ (identity >> Decode.nullable)


type alias InviteRequiredArguments =
    { input : Cambiatus.InputObject.InviteInput }


{-| An invite
-}
invite :
    InviteRequiredArguments
    -> SelectionSet decodesTo Cambiatus.Object.Invite
    -> SelectionSet (Maybe decodesTo) RootQuery
invite requiredArgs object_ =
    Object.selectionForCompositeField "invite" [ Argument.required "input" requiredArgs.input Cambiatus.InputObject.encodeInviteInput ] object_ (identity >> Decode.nullable)


type alias NotificationHistoryRequiredArguments =
    { account : String }


notificationHistory :
    NotificationHistoryRequiredArguments
    -> SelectionSet decodesTo Cambiatus.Object.NotificationHistory
    -> SelectionSet (List decodesTo) RootQuery
notificationHistory requiredArgs object_ =
    Object.selectionForCompositeField "notificationHistory" [ Argument.required "account" requiredArgs.account Encode.string ] object_ (identity >> Decode.list)


type alias ObjectiveRequiredArguments =
    { input : Cambiatus.InputObject.ObjectiveInput }


{-| A single objective
-}
objective :
    ObjectiveRequiredArguments
    -> SelectionSet decodesTo Cambiatus.Object.Objective
    -> SelectionSet (Maybe decodesTo) RootQuery
objective requiredArgs object_ =
    Object.selectionForCompositeField "objective" [ Argument.required "input" requiredArgs.input Cambiatus.InputObject.encodeObjectiveInput ] object_ (identity >> Decode.nullable)


type alias ProductRequiredArguments =
    { id : Int }


product :
    ProductRequiredArguments
    -> SelectionSet decodesTo Cambiatus.Object.Product
    -> SelectionSet (Maybe decodesTo) RootQuery
product requiredArgs object_ =
    Object.selectionForCompositeField "product" [ Argument.required "id" requiredArgs.id Encode.int ] object_ (identity >> Decode.nullable)


type alias ProductsOptionalArguments =
    { filters : OptionalArgument Cambiatus.InputObject.ProductsFilterInput }


type alias ProductsRequiredArguments =
    { communityId : String }


products :
    (ProductsOptionalArguments -> ProductsOptionalArguments)
    -> ProductsRequiredArguments
    -> SelectionSet decodesTo Cambiatus.Object.Product
    -> SelectionSet (List decodesTo) RootQuery
products fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { filters = Absent }

        optionalArgs =
            [ Argument.optional "filters" filledInOptionals.filters Cambiatus.InputObject.encodeProductsFilterInput ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "products" (optionalArgs ++ [ Argument.required "communityId" requiredArgs.communityId Encode.string ]) object_ (identity >> Decode.list)


type alias SearchRequiredArguments =
    { communityId : String }


search :
    SearchRequiredArguments
    -> SelectionSet decodesTo Cambiatus.Object.SearchResult
    -> SelectionSet decodesTo RootQuery
search requiredArgs object_ =
    Object.selectionForCompositeField "search" [ Argument.required "communityId" requiredArgs.communityId Encode.string ] object_ identity


type alias TransferRequiredArguments =
    { input : Cambiatus.InputObject.TransferInput }


{-| A single Transfer
-}
transfer :
    TransferRequiredArguments
    -> SelectionSet decodesTo Cambiatus.Object.Transfer
    -> SelectionSet (Maybe decodesTo) RootQuery
transfer requiredArgs object_ =
    Object.selectionForCompositeField "transfer" [ Argument.required "input" requiredArgs.input Cambiatus.InputObject.encodeTransferInput ] object_ (identity >> Decode.nullable)


type alias UserRequiredArguments =
    { account : String }


{-| A users
-}
user :
    UserRequiredArguments
    -> SelectionSet decodesTo Cambiatus.Object.User
    -> SelectionSet (Maybe decodesTo) RootQuery
user requiredArgs object_ =
    Object.selectionForCompositeField "user" [ Argument.required "account" requiredArgs.account Encode.string ] object_ (identity >> Decode.nullable)
