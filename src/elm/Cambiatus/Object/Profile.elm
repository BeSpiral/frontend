-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Cambiatus.Object.Profile exposing (..)

import Cambiatus.Enum.TransferDirection
import Cambiatus.InputObject
import Cambiatus.Interface
import Cambiatus.Object
import Cambiatus.Scalar
import Cambiatus.ScalarCodecs
import Cambiatus.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


account : SelectionSet String Cambiatus.Object.Profile
account =
    Object.selectionForField "String" "account" [] Decode.string


address : SelectionSet decodesTo Cambiatus.Object.Address -> SelectionSet (Maybe decodesTo) Cambiatus.Object.Profile
address object_ =
    Object.selectionForCompositeField "address" [] object_ (identity >> Decode.nullable)


analysisCount : SelectionSet Int Cambiatus.Object.Profile
analysisCount =
    Object.selectionForField "Int" "analysisCount" [] Decode.int


avatar : SelectionSet (Maybe String) Cambiatus.Object.Profile
avatar =
    Object.selectionForField "(Maybe String)" "avatar" [] (Decode.string |> Decode.nullable)


bio : SelectionSet (Maybe String) Cambiatus.Object.Profile
bio =
    Object.selectionForField "(Maybe String)" "bio" [] (Decode.string |> Decode.nullable)


chatToken : SelectionSet (Maybe String) Cambiatus.Object.Profile
chatToken =
    Object.selectionForField "(Maybe String)" "chatToken" [] (Decode.string |> Decode.nullable)


chatUserId : SelectionSet (Maybe String) Cambiatus.Object.Profile
chatUserId =
    Object.selectionForField "(Maybe String)" "chatUserId" [] (Decode.string |> Decode.nullable)


communities : SelectionSet decodesTo Cambiatus.Object.Community -> SelectionSet (List decodesTo) Cambiatus.Object.Profile
communities object_ =
    Object.selectionForCompositeField "communities" [] object_ (identity >> Decode.list)


createdAt : SelectionSet (Maybe String) Cambiatus.Object.Profile
createdAt =
    Object.selectionForField "(Maybe String)" "createdAt" [] (Decode.string |> Decode.nullable)


createdBlock : SelectionSet (Maybe Int) Cambiatus.Object.Profile
createdBlock =
    Object.selectionForField "(Maybe Int)" "createdBlock" [] (Decode.int |> Decode.nullable)


createdEosAccount : SelectionSet (Maybe String) Cambiatus.Object.Profile
createdEosAccount =
    Object.selectionForField "(Maybe String)" "createdEosAccount" [] (Decode.string |> Decode.nullable)


email : SelectionSet (Maybe String) Cambiatus.Object.Profile
email =
    Object.selectionForField "(Maybe String)" "email" [] (Decode.string |> Decode.nullable)


type alias GetPayersByAccountRequiredArguments =
    { account : String }


{-| List of payers to the given recipient fetched by the part of the account name.
-}
getPayersByAccount : GetPayersByAccountRequiredArguments -> SelectionSet decodesTo Cambiatus.Object.Profile -> SelectionSet (Maybe (List (Maybe decodesTo))) Cambiatus.Object.Profile
getPayersByAccount requiredArgs object_ =
    Object.selectionForCompositeField "getPayersByAccount" [ Argument.required "account" requiredArgs.account Encode.string ] object_ (identity >> Decode.nullable >> Decode.list >> Decode.nullable)


interests : SelectionSet (Maybe String) Cambiatus.Object.Profile
interests =
    Object.selectionForField "(Maybe String)" "interests" [] (Decode.string |> Decode.nullable)


invitations : SelectionSet (Maybe (List (Maybe String))) Cambiatus.Object.Profile
invitations =
    Object.selectionForField "(Maybe (List (Maybe String)))" "invitations" [] (Decode.string |> Decode.nullable |> Decode.list |> Decode.nullable)


kyc : SelectionSet decodesTo Cambiatus.Object.KycData -> SelectionSet (Maybe decodesTo) Cambiatus.Object.Profile
kyc object_ =
    Object.selectionForCompositeField "kyc" [] object_ (identity >> Decode.nullable)


location : SelectionSet (Maybe String) Cambiatus.Object.Profile
location =
    Object.selectionForField "(Maybe String)" "location" [] (Decode.string |> Decode.nullable)


name : SelectionSet (Maybe String) Cambiatus.Object.Profile
name =
    Object.selectionForField "(Maybe String)" "name" [] (Decode.string |> Decode.nullable)


network : SelectionSet decodesTo Cambiatus.Object.Network -> SelectionSet (Maybe (List (Maybe decodesTo))) Cambiatus.Object.Profile
network object_ =
    Object.selectionForCompositeField "network" [] object_ (identity >> Decode.nullable >> Decode.list >> Decode.nullable)


type alias TransfersOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , date : OptionalArgument Cambiatus.ScalarCodecs.Date
    , direction : OptionalArgument Cambiatus.Enum.TransferDirection.TransferDirection
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , secondPartyAccount : OptionalArgument String
    }


{-|

  - date - The date of the transfer in `yyyy-mm-dd` format.
  - secondPartyAccount - Account name of the other participant of the transfer.

-}
transfers : (TransfersOptionalArguments -> TransfersOptionalArguments) -> SelectionSet decodesTo Cambiatus.Object.TransferConnection -> SelectionSet (Maybe decodesTo) Cambiatus.Object.Profile
transfers fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, date = Absent, direction = Absent, first = Absent, last = Absent, secondPartyAccount = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "date" filledInOptionals.date (Cambiatus.ScalarCodecs.codecs |> Cambiatus.Scalar.unwrapEncoder .codecDate), Argument.optional "direction" filledInOptionals.direction (Encode.enum Cambiatus.Enum.TransferDirection.toString), Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "secondPartyAccount" filledInOptionals.secondPartyAccount Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "transfers" optionalArgs object_ (identity >> Decode.nullable)
