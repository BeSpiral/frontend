-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Bespiral.Query exposing (..)

import Bespiral.InputObject
import Bespiral.Interface
import Bespiral.Object
import Bespiral.Scalar
import Bespiral.ScalarCodecs
import Bespiral.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias ChatPreferencesRequiredArguments =
    { input : Bespiral.InputObject.ChatInput }


{-| A chat preferences
-}
chatPreferences : ChatPreferencesRequiredArguments -> SelectionSet decodesTo Bespiral.Object.ChatPreferences -> SelectionSet (Maybe decodesTo) RootQuery
chatPreferences requiredArgs object_ =
    Object.selectionForCompositeField "chatPreferences" [ Argument.required "input" requiredArgs.input Bespiral.InputObject.encodeChatInput ] object_ (identity >> Decode.nullable)


{-| A list of communities in BeSpiral
-}
communities : SelectionSet decodesTo Bespiral.Object.Community -> SelectionSet (List decodesTo) RootQuery
communities object_ =
    Object.selectionForCompositeField "communities" [] object_ (identity >> Decode.list)


type alias CommunityRequiredArguments =
    { symbol : String }


{-| A single community
-}
community : CommunityRequiredArguments -> SelectionSet decodesTo Bespiral.Object.Community -> SelectionSet (Maybe decodesTo) RootQuery
community requiredArgs object_ =
    Object.selectionForCompositeField "community" [ Argument.required "symbol" requiredArgs.symbol Encode.string ] object_ (identity >> Decode.nullable)


type alias ProfileRequiredArguments =
    { input : Bespiral.InputObject.ProfileInput }


{-| A users profile
-}
profile : ProfileRequiredArguments -> SelectionSet decodesTo Bespiral.Object.Profile -> SelectionSet (Maybe decodesTo) RootQuery
profile requiredArgs object_ =
    Object.selectionForCompositeField "profile" [ Argument.required "input" requiredArgs.input Bespiral.InputObject.encodeProfileInput ] object_ (identity >> Decode.nullable)


type alias SaleRequiredArguments =
    { input : Bespiral.InputObject.SaleInput }


{-| A single sale from BeSpiral
-}
sale : SaleRequiredArguments -> SelectionSet decodesTo Bespiral.Object.Sale -> SelectionSet (Maybe decodesTo) RootQuery
sale requiredArgs object_ =
    Object.selectionForCompositeField "sale" [ Argument.required "input" requiredArgs.input Bespiral.InputObject.encodeSaleInput ] object_ (identity >> Decode.nullable)


{-| A list of sale history
-}
saleHistory : SelectionSet decodesTo Bespiral.Object.SaleHistory -> SelectionSet (Maybe (List (Maybe decodesTo))) RootQuery
saleHistory object_ =
    Object.selectionForCompositeField "saleHistory" [] object_ (identity >> Decode.nullable >> Decode.list >> Decode.nullable)


type alias SalesRequiredArguments =
    { input : Bespiral.InputObject.SalesInput }


{-| A list of sales in BeSpiral
-}
sales : SalesRequiredArguments -> SelectionSet decodesTo Bespiral.Object.Sale -> SelectionSet (List decodesTo) RootQuery
sales requiredArgs object_ =
    Object.selectionForCompositeField "sales" [ Argument.required "input" requiredArgs.input Bespiral.InputObject.encodeSalesInput ] object_ (identity >> Decode.list)
